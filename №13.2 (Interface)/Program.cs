using System;

namespace CODE_BLOG__13._2__Interface_
{
    class Program
    {
        static void Main(string[] args)
        {
            // Интерфейсы C# (Interface) - Учим Шарп #13
            // Интерфесы - это урезанные определения классов. Интерфейс как и классы создаются в отдельном файле.
            // Интерфейсы это все что публичное и мы можем использовать модификаторы public и internal.

            // В интерфейсе можно определять:
                // методы;
                // свойства;
                // индексаторы;
                // события.
            // В интерфейсе мы НЕ можем определять:
                // поля класса;
                // мы не можем определять все что закрыто.

            // Инерфейсы НЕ НАСЛЕДУЮТСЯ, они реализуются или имплементируются! Множественная реализация интерфейся в С# поддерживается.
            // Интерфейс - это по сути кнопка "Старт" на микроволновке, но мы не видим реализации метода, тоесть то что происходит внутри.

            // Зачем нужны интерфейсы:
            // 1. Не задумываемся о реализации, просто определяем как выглядит метод, какие нужны свойства, как мы планируем его
            // задействовать. На этапе проектырования проще продумывать внешний интерфейс, тоесть какие ты видишь способы работы
            // с классом. Если мы архитекторы, то мы разбросали интерфейсы, а реализацию отдаем программистам ниже уровнем.
            // 2. Когда мы хотим чтобы у нескольких классов была конкретная реализация тех методов, но сама реализация метода
            // может быть коордитнально разная. Н/П: мы можем определить интерфейс IMovement и в нем сделать метод Move() и
            // реализовывать этот интерфейс будет машина, человек, муравей, самолет итд. Тоесть поведение реализаций будут 
            // координально отличаться. И если эти классы реализуют интерфейс IMovement то у этих классов будет гарантированно
            // этот метод Move().

            // Когда мы реализуем интерфейс мы гарантируем, что у экземпляра этого класса будет такой метод. Соответственно мы будем
            // уверены, что, независимо от того, что у нас будет лежать в этом списке, мы спокойно сможем обращаться к методу Move().














        }
    }
}
