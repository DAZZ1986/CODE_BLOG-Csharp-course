using System;

namespace CODE_BLOG__27_CLR_в_.NET_Framework_на_примере
{
    class Program
    {
        static void Main(string[] args)
        {
            // CLR в .NET Framework на примере C# - Учим Шарп #27
            /* 
            Код на C# сначала компелируется в промежуточный язык CIL и далее CIL код компилируется в JIT(компиляторе) в Native code. 
            C# - CIL - Native code. Все это компилируется в CLR. Компиляция из CIL кода в native code, означает, что CIL на конкретном ПК 
            уже будет конвертироваться в машинный код конкретно под ваш процессор. Стандартная библиотека классов в .NET позволяет 
            использовать готовый набор классов как к примеру Console.WriteLine.


            Common Language Runtime (CLR — общеязыковая исполняющая среда(компилятор)) — исполняющая среда для байт-кода CIL, в который 
            компилируются программы, написанные на .NET-совместимых языках программирования (C#, Managed C++, Visual Basic .NET, F# и 
            прочие). CLR является одним из основных компонентов пакета Microsoft .NET Framework. Среда CLR является реализацией 
            спецификации CLI (англ. Common Language Infrastructure), спецификации общеязыковой инфраструктуры компании Microsoft. 
            CLR - этро набор служб, библиотек, в котором у нас выполняется приложение.

            Common Intermediate Language (CIL) — «высокоуровневый ассемблер» виртуальной машины .NET. Промежуточный язык, разработанный 
            фирмой Microsoft для платформы .NET Framework. JIT-компилятор CIL является частью CLR (англ. common language runtime) — общей 
            среды выполнения программ, написанных на языках .NET. Все компиляторы, поддерживающие платформу .NET, должны транслировать код
            с языков высокого уровня платформы .NET на язык CIL. В частности, код на языке CIL генерируют все компиляторы .NET.
            Зачем нужен промежуточный язык CIL - потому что он очень близок к машинному коду, это не машинный код, но он очень близок, там
            не машинные слова, а в цифровом формате заданы команды и он очень быстро компилируется, очень быстро. Это компенсирует 
            замедление компиляции во время первого запуска приложения и в процессе выполнения у нас быстро происходит преобразование и нет
            большой задержки при компиляции как в обычных языках программирования. Тоесть у нас язык высокого уровня C# легко транслируется
            в CIL язык, а CIL язык легко и быстро транслируется в машинный код.




            Архитектура
            Общее понятие CLI (Common Language Infrastructure) - это наше соглашение, регламент, правила, требования которым должна наша
            среда следовать. Включает 2 основных компонента:
            1. Common Type System - это наличие типов в языке. (строготипизорованный язык)
            2. Common Language System - это языковые конструкции, синтаксис, тоесть циклы, геттеры сеттеры, синтаксический сахар и тд.




            Коротко аббривиатуры:
            CIL (Common Intermediate Language) — промежуточный язык
            CLI - соглашение, включающее 2 компонента:
                CTS - типы
                CLS - язык
            __________________
            CLR - среда исполнения (как у java JVM) - которая принимает на вход промежуточный язык CIL, получает информацию о том на какой
            системе, на каком железе, в каком окружении запущено приложение, в какой среде это все выполняется и преобразует в машинный 
            код в соответствии какая машина, на каком процессоре это все используется. Кроме того CLR управляет доп. параметрами, разделение
            потоков, выделение памяти, вся это ответственность на CLR.

            Внутри CLR есть 2 крупные библиотеки:
            1. BCL (Base Class Library) - базовый классы
            2. FCL (Framework Class Library)- это специализированные классы. Это по сути расширением над BCL, если в BCL у нас все самое 
            базовое, то в FCL у нас содержатся те базовые сущности/классы которые узкоспециализированные. Н/П: если работаем с ASP.NET то
            мы получаем набор классов для ASP, так же наборы классов для WPF, Unity и тд.

            ВЫЗОВ И КОМПИЛЯЦИЯ как происходит - на входе мы имеем код на одном из языков программир. .NET, C#, F#, VB - он компилируется
            в CIL код и далее через JIT компилятор у нас получается машинный код.

            JIT (Just in time) - когда запускается наше приложение, оно видит обращение к какому либо методу, Н/П:Console.WriteLine("Hello")
            изначально в приложении к нам приходит CIL код который еще не скомпилирован, после этого CLR видит, что внутри кода у нас идет
            обращение к типу Console и вызывается его метод WriteLine, и именно этот метод компилируется в машинный код, кладет его в кэш и 
            передает управление дальше. По сути когда у нас идет первое обращение к какому то методу, какого то класса, только в этот 
            момент у нас происходит компиляция в машинный код. Тоесть если у нас нет обращения к какому либо классу, который содержится в 
            библиотеке, нет обращения к каким то методам этого класса, то они не будут компилироваться! НЕТ ОБРАЩЕНИЯ = НЕТ КОМПИЛЯЦИИ!
            Поэтому у нас есть плюс, в том что мы не выполняем компиляцию сразу всего проекта. При этом у нас идет кэширование, тоесть наш
            CIL код когда периводится в нативный, он кладется в кэш, соответственно если мы второй раз обратимся к тому же методу, 
            компиляция второй раз выполняться не будет, поэтому мы получаем снижение производительности только при первом запуске программы.
            
            По поводу .exe файла - он состоит из основных 2 компонентов: 
            1) это наш CIL код, и 
            2) мета-данные нашего приложения, там содержится, куча доп. информации, все типы данных, все поля, все методы которые есть 
            внутри нашей сборки, это и является основной причиной, почему C# так легко дизассамблируется. Вся информация в CIL коде она 
            описана в мета-данных, а их легко получить и на основе мета-данных восстановить исходный код.
             
            Сборка - это набор классов и мета-данных которые их описывают. 
            
            Управляемый и НЕ управляемый код - разница между ними очень проста, Управляемый код выполняется в CLR, а НЕ управляемый код
            выполняется в не CLR. Но при желании CLR может взаимодействовать с НЕ управляемым кодом.

            */




















        }
    }
}
