using System;

namespace CODE_BLOG__18__socket_
{
    class Program
    {
        static void Main(string[] args)
        {
            // Сокеты (socket) и клиент-серверное взаимодействие по протоколам TCP и UDP в C# - Учим Шарп #18
            /* 
            Клиент-серверное взаимодействие - это по сути браузеры, сайты. Тоесть когда данные передаются с одного ПК на другой.

            Клиентская часть - это приложение которым пользуется человек, это приложение пользователь. 
            Сервер - это мозг, а пользователь это приложение которое обращается к мозгу за информацией, дает запрос и получает ответ. 
            Яркий пример это браузер, который для нас постоянно запрашивает страницы и мы можем видеть интерфейс. 
            Логика - тут взаимодействует либо человек, либо приложение само по себе работает и оно что то делает и ей нужно получить 
            данные и она отправляет запрос на сервер и получает ответ.

            Серверная часть  - это запущенное приложение на ПК, которое всегда ждет входящего сигнала. Когда поступает сигнал, оно этот 
            сигнал читает, обрабатывает, выполняет действия и отдает ответ.
            Логика - сервер всегда находится в режиме ожидания/прослушивания.

            Протоколы TCP и UDP - два самых популярных для обмена данных. 
            TCP - устанавливает четкое соединение между клиентом и сервером, как канал и гарантирует, что будет доставлен запрос и 
            получен ответ. Если ответа нет о подтверждении получения, то он будет посылать тот же пакет снова и снова или пока не будет 
            превышено кол-во запросов иначе все зависнет. Минус его в том что работает медленно и дает большую нагрузку, тк уходит время
            на установку соединения. Если сервер получит 5 TCP соединений он это обработает, но если будут сыпаться обратные подтверждения
            от миллиона клиентов он просто упадет и для этого используется протокол UDP (далее читаем ниже про UDP). Общение 1 на 1.
            UDP - не гарантирует доставку, но он более быстрый, легкий и за счет этого обеспечивается хорошая широковещательная реализация
            когда нам нужно оповестить большое кол-во клиентов. TCP это когда ты человеку сказал прямо в лицо и ты точно видишь что он
            тебя понимает и слышит, то UDP это ты проарал в громкоговоритель, кто то услышал, кто то нет. Но главное что оратор при это
            остается не загруженным.

            Пактический пример использования:
            Если это САЙТ - то это TCP, тк протокол http базируется на протоколе TCP. Ты гарантированно получишь весь сайт или сайт
            отвалится по таймауту.
            Если это СТРИМИНГ - то лучше UDP, ты транслирует поток видеоданных и клиенты могут подключаться и прослушивать, но при этом 
            могут быть прерывания, притормаживание, это как раз и есть потеря части UDP пакетор.
            А в целом когда и что применять смотрим по ситуации и логике, если тебе нужно железное оповещение TCP, если много клиентов
            с которыми нужно со всеми сразу держать соединение то UDP.

            Чтобы установить взаимодействие нам нужен конкретный адрес приложения в сети. Адрес в сети задается 2 параметрами - это IP и 
            порт. ДАЛЕЕ В ПРОЕКТЕ- CODE_BLOG №18 ServerTcp и CODE_BLOG №18_ClientTcp и UDP в тех же проектах реализовали в разных #region.


            Чтобы создать несколько клиентов, нужно использовать разные порты. Некий аналог чата, когда одновременно пишут несколько 
            человек в один чат(чат это сервер по сути если как на ютубе во время стрима).

            */




        }
    }
}
