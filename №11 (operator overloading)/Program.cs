using System;

namespace CODE_BLOG__11
{
    class Program
    {
        static void Main(string[] args)
        {
            // Перегрузка операторов (operator), абстрактные классы, static в C# - Учим Шарп #11

            // abstract - это ключевое слово делает классы абстрактными, которое запрещает делать экземпляры данного класса.
            // Product a = new Product(); // тут ошибка тк мы не можем создавать экзепляры абстрактного класса.

            // 1. Он нужен для того, чтобы делать иерархию наследования, мы в абстрактном классе определяем группу родственных
            // объектов (это все то что будет общее для всех продуктов, НП: для яблока, гречки итд.)
            // 2. Абстрактные классы мы создаем для каких либо не конкретных понятий. Это просто как группировка различных объектов, 
            // которая позволяет уменьшить дублирование кода.
            // 3. Абстрактный класс будет являться фигурой, а конкретный класс будет являться кругом, квадратом, прямоугольником итд.
            // В нашем случае абстрактным классом будет продукт, а конкретными классами будут, крупа, гречка, яблоко итд.
            // НО каждый продукт будет обладать какими то общими свойствами, которые мы и пропишем в абстрактном классе.

            Apple apple1 = new Apple("Красное яблоко", 100, 100);
            Apple apple2 = new Apple("Зеленое яблоко", 90, 110);

            var sumApple = Apple.Add(apple1, apple2); // вызов статического метода - не через экземпляр класса, а через имя самого класса!
            var sumAppple2 = apple1 + apple2;         // тут делаем сложение через переопределенный знак "+" в методе "operator +".
            var sumAppple3 = apple1 + 100;            // всегда возвращается новый экземпляр

            Console.WriteLine(apple1);
            Console.WriteLine(apple2);
            Console.WriteLine(sumApple);
            Console.WriteLine(sumAppple2);
            Console.WriteLine(sumAppple3);

            Console.WriteLine(apple1 == apple2);        // проверяем на оператор сравнения
            Console.WriteLine(sumApple == sumAppple2);  // к примеру если мы удалим наши переопределнметода методы сравнения, то тк 
                                                        // это два объекта, компилятор будет сравнивать адреса объектов в памяти, и тк
                                                        // это разные объекты, тут будет false тк адреса разные. Тоесть мы тут вообще
                                                        // не имена будем сравнивать, а уже два объекта.
        }
    }
}
