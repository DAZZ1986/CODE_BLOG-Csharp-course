using System;

namespace CODE_BLOG__10._2__method_
{
    class Program
    {
        static void Main(string[] args)
        {
            /* Методы C# (Method C#) классов - Учим Шарп #10
            Метод - это действие которое может совершить сам объект или действие которое может совершиться над объектом.
            СИНТАКСИС:
            модификатор_доступа, тип_возвращ_значения имя_метода(тип_аргумента имя_аргумента)
            {
                тело_метода;
            }

            static - если это метод, то он который будет относиться ко всему классу в целом, а не к конкретному экземпляру.
            Если это переменная, то это общая переменная, которая будет доступна всем экземплярам класса одноврименно. 
            Со статикой нужно быть максимально аккуратным! Чаще методы объявляются не статические, внутри наших собственных классов.
            */




            // пример метода 1 (static)
            var j = PrintHello("Vasy", 34);
            Console.WriteLine(j);       // вернется то что передали в return

            Console.WriteLine("|||||||||||||||||||||||||||||||||||||||||||||");


            // пример метода 2 (с конструктором и классом Person)
            var person1 = new Person("Ivanov", "Ivan"); //после возврата с конструктора, тут мы получаем готовый сформированный экземпляр класса.
            var person2 = new Person("Petrov", "Petr");

            for (int i = 0; i < 10; i++)
            {
                var position1 = person1.Run();
                Console.WriteLine(position1);
                string position2 = person2.Run();
                Console.WriteLine(position2);

                // перегрузка
                Console.WriteLine(person1.Run(32, 35));
                Console.WriteLine(person1.Run(32.3));

            }

            /* ПЕРЕГРУЗКА МЕТОДОВ
            Сигнатура складывается из следующих аспектов:
                - Имя метода
                - Количество параметров
                - Типы параметров
                - Порядок параметров
                - Модификаторы параметров
             Но названия параметров в сигнатуру НЕ входят.Например, возьмем следующий метод:
            public int Sum(int x, int y) 
            { 
                return x + y;
            }
            У данного метода сигнатура будет выглядеть так: Sum(int, int)

            И перегрузка метода как раз заключается в том, что методы имеют разную сигнатуру, в которой совпадает только название
            метода. То есть методы должны отличаться по:
                - Количество параметров
                - Типы параметров
                - Порядок параметров
                - Модификаторы параметров
            */




            // РЕКУРСИЯ - это умножение чисел до целевой цифры. НП: факториал 5=120, это 1*2*3*4*5=120
            // Рекурсия - это когда метод вызывает сам себя, и при каждом вызове метода внутри самого себя метод кагбы копируется
            // и каждый раз мы попадаем в новый метод уходя глубже и далее мы выходим и методов так же по иерархии наверх, выходя
            // из каждого внутреннего метода.

            Console.WriteLine(Factorial(5));



        }






        // пример метода 1 (static)
        public static int PrintHello(string name, int age)
        {
            Console.WriteLine($"Privet, {name}, vam {age} let");
            return 2;   // мы не обязаны сохранять куда либо возвращаемое значение, а если нам нужно сохранить значение из return,
        }               // то просто объявляем перименную i и в нее передастся из метода "2". Важно в нее не сохранятся параметры 
                        // или что то другое, в нее сохранится то что вернется из return.


        // рекурсия
        public static int Factorial(int value)
        {
            if (value <= 1)
            {
                return 1;
            }
            else 
            {
                return value * Factorial(value - 1);
            }
        }




    }
}
